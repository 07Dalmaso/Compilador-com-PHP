Pular para o conteúdo principal
Google Sala de Aula
Google Sala de Aula
Compiladores
ENGCNM4B-MDC168-20232 - IESB SUL
A turma foi arquivada pelo professor. Não é possível adicionar ou editar informações.
21/11/2023 - Implementação do compilador SIMPLE/SML - fase de síntese
21/11/2023 - Implementação do compilador SIMPLE/SML - fase de síntese
Cristiano Lehrer
•
31 de out. de 2023 (editado: 22 de nov. de 2023)
4 pontos
Data de entrega: 21 de nov. de 2023, 23:59
Desenvolver a fase de síntese (código intermediário, se necessário, gerência de memória e código objeto) do compilador para a linguagem de programação SIMPLE.

Observações:
1. o compilador poderá ser desenvolvido individualmente, ou no máximo, em dupla:
1.1. caso o compilador seja desenvolvido em dupla, postar a resposta no
classroom somente uma vez, e indicar os componentes da dupla.

2. o compilador poderá ser desenvolvido na linguagem de programação de sua
preferência, desde que seja open source e esteja disponível no Ubuntu 22.04.
2.1. anexar o código-fonte e as instruções para a compilação e execução do compilador;
2.2. não serão aceitos arquivos fonte com extensão diferente da linguagem de programação utilizada.

3. caso seja identificado compiladores idênticos ou muito parecidos entre
os grupos (como por exemplo pelo controle de plágio, originalidade
disponibilizado pelo classroom), ambos serão desconsiderados.

4. a avaliação do compilador será realizada com a submissão de quatro
códigos-fonte escritos na linguagem de programação SIMPLE
4.1. cada código-fonte cujo código objeto seja executado corretamente valerá 1,0 ponto.

5.conforme o plano de ensino, o desenvolvimento do compilador vale 2,0
pontos na nota da Segunda Avaliação, de modo que a nota a ser lançada
na consolidação da Segunda Avaliação será a nota do classroom dividido
por 2.

6. Segue um exemplo do arquivo de entrada fornecido (escrito na linguagem SIMPLE) e do arquivo de saída esperado (produzido pelo compilador na linguagem SML).

entrada.txt
Texto

saida.txt
Texto

teste1.txt
Texto

teste2.txt
Texto

teste3.txt
Texto

teste4.txt
Texto
Comentários da turma
Seus trabalhos
Com nota
Comentários particulares
01 rem Verificar otimizacao de codigo
02 input 2 input 3 output 5
10 input a
15 input b
20 let c = a + b
21 let c = a + b
22 let c = a + b
23 let c = a + b
24 let c = a + b
25 let c = a + b
26 let c = a + b
27 let c = a + b
28 let c = a + b
29 let c = a + b
30 let c = a + b
31 let c = a + b
32 let c = a + b
33 let c = a + b
34 let c = a + b
35 let c = a + b
36 let c = a + b
37 let c = a + b
38 let c = a + b
39 let c = a + b
40 let c = a + b
41 let c = a + b
42 let c = a + b
43 let c = a + b
44 let c = a + b
45 let c = a + b
46 let c = a + b
47 let c = a + b
48 let c = a + b
49 let c = a + b
50 let c = a + b
51 let c = a + b
52 let c = a + b
53 let c = a + b
54 let c = a + b
55 let c = a + b
56 let c = a + b
57 let c = a + b
58 let c = a + b
59 let c = a + b
60 let c = a + b
65 print c
70 end